From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Wed, 20 Mar 2024 21:48:26 +0900
Subject: [PATCH] Sync entity PersistentDataContainer


diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 0ede73178243e3681039896a18e9eec59d1ac499..f26aa9a827dbaffcdc85ee30e003d03c9bc9d626 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -192,6 +192,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 
 import co.aikar.timings.MinecraftTimings; // Paper
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperDirtyCraftPersistentDataContainer;
 import puregero.multipaper.MultiPaperExternalBlocksHandler;
 import puregero.multipaper.MultiPaperFileSyncer;
 import puregero.multipaper.externalserverprotocol.DifficultyUpdatePacket;
@@ -1805,6 +1806,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         }
         this.isIteratingOverLevels = false; // Paper - Throw exception on world create while being ticked
 
+        MultiPaperDirtyCraftPersistentDataContainer.tick(); // MultiPaper
+
         //this.profiler.popPush("connection"); // Purpur
         // MinecraftTimings.connectionTimer.startTiming(); // Spigot // Paper // Purpur
         this.getConnection().tick();
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
index a993c61aecbc7644b871ade1f23628ec4792ca63..236f162b437b52f0d86fae40d20cb6d5f4b22c88 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftEntity.java
@@ -57,6 +57,7 @@ import org.bukkit.util.BoundingBox;
 import org.bukkit.util.NumberConversions;
 import org.bukkit.util.Vector;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperDirtyCraftPersistentDataContainer;
 import puregero.multipaper.externalserverprotocol.EntityTeleportPacket;
 
 import net.md_5.bungee.api.chat.BaseComponent; // Spigot
@@ -69,7 +70,7 @@ public abstract class CraftEntity implements org.bukkit.entity.Entity {
     protected Entity entity;
     private final EntityType entityType;
     private EntityDamageEvent lastDamageEvent;
-    private final CraftPersistentDataContainer persistentDataContainer = new CraftPersistentDataContainer(CraftEntity.DATA_TYPE_REGISTRY);
+    private final CraftPersistentDataContainer persistentDataContainer = new MultiPaperDirtyCraftPersistentDataContainer(this, CraftEntity.DATA_TYPE_REGISTRY); // MultiPaper - sync persistent data container
     protected net.kyori.adventure.pointer.Pointers adventure$pointers; // Paper - implement pointers
     // Paper start - Folia shedulers
     public final io.papermc.paper.threadedregions.EntityScheduler taskScheduler = new io.papermc.paper.threadedregions.EntityScheduler(this);
diff --git a/src/main/java/puregero/multipaper/MultiPaperDirtyCraftPersistentDataContainer.java b/src/main/java/puregero/multipaper/MultiPaperDirtyCraftPersistentDataContainer.java
new file mode 100644
index 0000000000000000000000000000000000000000..148f163c5a262e2f46eadb554d8ff8dc01592734
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperDirtyCraftPersistentDataContainer.java
@@ -0,0 +1,63 @@
+package puregero.multipaper;
+
+import io.papermc.paper.chunk.system.scheduling.NewChunkHolder;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.NamespacedKey;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataTypeRegistry;
+import org.bukkit.persistence.PersistentDataType;
+import org.jetbrains.annotations.NotNull;
+import puregero.multipaper.externalserverprotocol.EntityPersistentDataUpdatePacket;
+
+import java.util.HashSet;
+import java.util.Set;
+
+public class MultiPaperDirtyCraftPersistentDataContainer extends CraftPersistentDataContainer {
+    private static final Set<MultiPaperDirtyCraftPersistentDataContainer> dirtyContainers = new HashSet<>();
+
+    public static void tick() {
+        for (MultiPaperDirtyCraftPersistentDataContainer container : dirtyContainers) {
+            Entity entity = container.entity.getHandle();
+
+            NewChunkHolder newChunkHolder = MultiPaper.getChunkHolder((ServerLevel) entity.level(), entity.chunkPosition().x, entity.chunkPosition().z);
+            if (newChunkHolder != null) {
+                MultiPaper.broadcastPacketToExternalServers(newChunkHolder.externalEntitiesSubscribers, () -> new EntityPersistentDataUpdatePacket(entity, container, container.modifiedKeys));
+            }
+
+            container.modifiedKeys.clear();
+        }
+
+        dirtyContainers.clear();
+    }
+
+
+    private final CraftEntity entity;
+    private final Set<NamespacedKey> modifiedKeys = new HashSet<>();
+
+    public MultiPaperDirtyCraftPersistentDataContainer(CraftEntity entity, CraftPersistentDataTypeRegistry dataTypeRegistry) {
+        super(dataTypeRegistry);
+        this.entity = entity;
+    }
+
+    @Override
+    public <T, Z> void set(@NotNull NamespacedKey key, @NotNull PersistentDataType<T, Z> type, @NotNull Z value) {
+        super.set(key, type, value);
+        this.setDirty(key);
+    }
+
+    @Override
+    public void remove(@NotNull NamespacedKey key) {
+        super.remove(key);
+        this.setDirty(key);
+    }
+
+    private void setDirty(NamespacedKey key) {
+        if (!EntityPersistentDataUpdatePacket.modifyingPersistentData) {
+            modifiedKeys.add(key);
+            dirtyContainers.add(this);
+        }
+    }
+
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/EntityPersistentDataUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/EntityPersistentDataUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..663665114949869a6ae20fc96bb5b60fa0e807dc
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/EntityPersistentDataUpdatePacket.java
@@ -0,0 +1,93 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.nbt.CompoundTag;
+import net.minecraft.nbt.Tag;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.entity.Entity;
+import org.bukkit.Bukkit;
+import org.bukkit.NamespacedKey;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import org.bukkit.craftbukkit.entity.CraftEntity;
+import org.bukkit.craftbukkit.persistence.CraftPersistentDataContainer;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.io.IOException;
+import java.util.Map;
+import java.util.Objects;
+import java.util.Set;
+import java.util.UUID;
+
+public class EntityPersistentDataUpdatePacket extends ExternalServerPacket {
+    private static final CompoundTag NULL_TAG = new CompoundTag();
+    static {
+        NULL_TAG.putBoolean("isNullTag", true);
+    }
+
+    public static boolean modifyingPersistentData = false;
+
+    private final UUID world;
+    private final UUID uuid;
+    private final byte[] data;
+
+    public EntityPersistentDataUpdatePacket(Entity entity, CraftPersistentDataContainer container, Set<NamespacedKey> keys) {
+        this.world = ((ServerLevel) entity.level()).uuid;
+        this.uuid = entity.getUUID();
+
+        CompoundTag tag = new CompoundTag();
+        for (NamespacedKey key : keys) {
+            Tag value = container.getRaw().getOrDefault(key.toString(), NULL_TAG);
+            tag.put(key.toString(), value);
+        }
+
+        try {
+            this.data = MultiPaper.nbtToBytes(tag);
+        } catch (IOException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+    public EntityPersistentDataUpdatePacket(FriendlyByteBuf in) {
+        this.world = in.readUUID();
+        this.uuid = in.readUUID();
+        this.data = in.readByteArray();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(world);
+        out.writeUUID(uuid);
+        out.writeByteArray(data);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            try {
+                modifyingPersistentData = true;
+                World bukkitWorld = Bukkit.getWorld(world);
+
+                if (bukkitWorld instanceof CraftWorld craftWorld) {
+                    ServerLevel level = craftWorld.getHandle();
+                    CompoundTag tag = MultiPaper.nbtFromBytes(data);
+                    Entity entity = level.getEntity(uuid);
+                    if (entity != null) {
+                        CraftEntity craftEntity = entity.getBukkitEntity();
+                        for (Map.Entry<String, Tag> entry : tag.tags.entrySet()) {
+                            if (Objects.equals(entry.getValue(), NULL_TAG)) {
+                                craftEntity.getPersistentDataContainer().remove(NamespacedKey.fromString(entry.getKey()));
+                            } else {
+                                craftEntity.getPersistentDataContainer().put(entry.getKey(), entry.getValue());
+                            }
+                        }
+                    }
+                }
+                modifyingPersistentData = false;
+            } catch (IOException e) {
+                e.printStackTrace();
+            }
+        });
+    }
+}
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 2c6ca0390049c98419ec08a41940b0a4a7c9b921..cee921f2584bfa2c961018fc5730619db2a1683f 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -81,6 +81,7 @@ public class ExternalServerPacketSerializer {
         addPacket(PistonMoveBlockEndPacket.class, PistonMoveBlockEndPacket::new);
         addPacket(AddPendingMessagePacket.class, AddPendingMessagePacket::new);
         addPacket(SetPlayerChatStatePacket.class, SetPlayerChatStatePacket::new);
+        addPacket(EntityPersistentDataUpdatePacket.class, EntityPersistentDataUpdatePacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
