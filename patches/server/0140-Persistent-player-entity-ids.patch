From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 1 Sep 2023 20:24:00 +0900
Subject: [PATCH] Persistent player entity ids


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index b802d90448f3275776bed3a34bb3324f67b0ad3b..d0a2a3d5541f9a0afe9d8e799c010736e914ac77 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -12,10 +12,13 @@ import java.util.ArrayList;
 import java.util.Collection;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Objects;
 import java.util.Optional;
 import java.util.OptionalInt;
 import java.util.Set;
+import java.util.UUID;
+import java.util.concurrent.ConcurrentHashMap;
 import java.util.stream.Collectors;
 import javax.annotation.Nullable;
 import net.minecraft.BlockUtil;
@@ -96,7 +99,6 @@ import net.minecraft.util.Mth;
 import net.minecraft.util.RandomSource;
 import net.minecraft.util.Unit;
 import net.minecraft.world.damagesource.DamageSource;
-import net.minecraft.world.damagesource.DamageSources;
 import net.minecraft.world.effect.MobEffectInstance;
 import net.minecraft.world.effect.MobEffects;
 import net.minecraft.world.entity.Entity;
@@ -188,6 +190,7 @@ import org.bukkit.event.player.PlayerTeleportEvent.TeleportCause;
 import org.bukkit.event.player.PlayerToggleSneakEvent;
 import org.bukkit.inventory.MainHand;
 import puregero.multipaper.*;
+import puregero.multipaper.config.MultiPaperConfiguration;
 import puregero.multipaper.externalserverprotocol.*;
 // CraftBukkit end
 
@@ -263,6 +266,7 @@ public class ServerPlayer extends Player {
     public boolean queueHealthUpdatePacket;
     public net.minecraft.network.protocol.game.ClientboundSetHealthPacket queuedHealthUpdatePacket;
     // Paper end - cancellable death event
+    public static final Map<UUID, Integer> persistentEntityIds = new ConcurrentHashMap<>(); // MultiPaper - persistent entity ids for players across servers
     // Paper start - Optional per player mob spawns
     public static final int MOBCATEGORY_TOTAL_ENUMS = net.minecraft.world.entity.MobCategory.values().length;
     public final int[] mobCounts = new int[MOBCATEGORY_TOTAL_ENUMS]; // Paper
@@ -342,6 +346,19 @@ public class ServerPlayer extends Player {
 
     public ServerPlayer(MinecraftServer server, ServerLevel world, GameProfile profile, ClientInformation clientOptions) {
         super(world, world.getSharedSpawnPos(), world.getSharedSpawnAngle(), profile);
+
+        // MultiPaper start - persistent entity ids for players across servers
+        if (MultiPaperConfiguration.get().syncSettings.persistentPlayerEntityIds) {
+            if (!(this instanceof ExternalPlayer)) {
+                Integer value = persistentEntityIds.get(profile.getId());
+                if (value != null) {
+                    setId(value);
+                }
+            }
+            persistentEntityIds.put(profile.getId(), getId());
+        }
+        // MultiPaper end - persistent entity ids for players across servers
+
         this.chatVisibility = ChatVisiblity.FULL;
         this.canChatColor = true;
         this.lastActionTime = Util.getMillis();
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index dbec60679e7032b04a50a8512bff9e1f908744a3..a644cb0ea4a2d0061019781feb9f608cf7b2be47 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -738,13 +738,17 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
         return this.entityData;
     }
 
-    public boolean equals(Object object) {
-        return object instanceof Entity ? ((Entity) object).id == this.id : false;
-    }
-
-    public int hashCode() {
-        return this.id;
-    }
+    // MultiPaper start - The Vanilla server never changes an entity's id from the randomly generated one, so we can use Java's built in equals and hashcode instead
+    // The Vanilla client does actually use these methods, but the server does not
+    // Since MultiPaper does change the entity's id, these can return true when the entities are not actually equal
+    //    public boolean equals(Object object) {
+    //        return object instanceof Entity ? ((Entity) object).id == this.id : false;
+    //    }
+    //
+    //    public int hashCode() {
+    //        return this.id;
+    //    }
+    // MultiPaper end
 
     public void remove(Entity.RemovalReason reason) {
         // CraftBukkit start - add Bukkit remove cause
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index 3f5852a23e50b3fe5c53f860ee0ad07c7028bc6c..306ce395dda3a6d842a4e644f24fef27bedf8113 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -54,6 +54,7 @@ public class ExternalPlayer extends ServerPlayer {
 
         if (MultiPaperConfiguration.get().syncSettings.syncEntityIds) {
             setId(entityId);
+            if (MultiPaperConfiguration.get().syncSettings.persistentPlayerEntityIds) persistentEntityIds.put(gameProfile.getId(), getId());// MultiPaper - persistent entity ids for players across servers
             // Update cache hast sets with our new entity id
             this.cachedSingleHashSet = new com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<>(this);
         }
