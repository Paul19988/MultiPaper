From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Mon, 13 Dec 2021 21:27:25 +1000
Subject: [PATCH] Sync gamerules


diff --git a/src/main/java/net/minecraft/world/level/GameRules.java b/src/main/java/net/minecraft/world/level/GameRules.java
index 4a340bd1f1859e43bb58e68aee4018fdb4ca7a5a..18b23c7d772946891bc76c82ef27e1edc33cc0c3 100644
--- a/src/main/java/net/minecraft/world/level/GameRules.java
+++ b/src/main/java/net/minecraft/world/level/GameRules.java
@@ -28,6 +28,7 @@ import net.minecraft.server.MinecraftServer;
 import net.minecraft.server.level.ServerLevel;
 import net.minecraft.server.level.ServerPlayer;
 import org.slf4j.Logger;
+import puregero.multipaper.externalserverprotocol.GameRuleUpdatePacket;
 
 public class GameRules {
 
@@ -368,6 +369,7 @@ public class GameRules {
         protected void updateFromArgument(CommandContext<CommandSourceStack> context, String name, GameRules.Key<BooleanValue> gameRuleKey) { // Paper start - Add WorldGameRuleChangeEvent
             io.papermc.paper.event.world.WorldGameRuleChangeEvent event = new io.papermc.paper.event.world.WorldGameRuleChangeEvent(context.getSource().getBukkitWorld(), context.getSource().getBukkitSender(), (org.bukkit.GameRule<Boolean>) org.bukkit.GameRule.getByName(gameRuleKey.toString()), String.valueOf(BoolArgumentType.getBool(context, name)));
             if (!event.callEvent()) return;
+           GameRuleUpdatePacket.onGameRuleChange(event.getWorld(), event.getGameRule().getName(), event.getValue()); // MultiPaper
             this.value = Boolean.parseBoolean(event.getValue());
             // Paper end - Add WorldGameRuleChangeEvent
         }
@@ -436,6 +438,7 @@ public class GameRules {
         protected void updateFromArgument(CommandContext<CommandSourceStack> context, String name, GameRules.Key<IntegerValue> gameRuleKey) { // Paper start - Add WorldGameRuleChangeEvent
             io.papermc.paper.event.world.WorldGameRuleChangeEvent event = new io.papermc.paper.event.world.WorldGameRuleChangeEvent(context.getSource().getBukkitWorld(), context.getSource().getBukkitSender(), (org.bukkit.GameRule<Integer>) org.bukkit.GameRule.getByName(gameRuleKey.toString()), String.valueOf(IntegerArgumentType.getInteger(context, name)));
             if (!event.callEvent()) return;
+            GameRuleUpdatePacket.onGameRuleChange(event.getWorld(), event.getGameRule().getName(), event.getValue()); // MultiPaper
             this.value = Integer.parseInt(event.getValue());
             // Paper end - Add WorldGameRuleChangeEvent
         }
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
index d98e9a1c9347f0c5849027d00b5a536432614f59..307ac24bb1bd523a42fa77f5b0052f9d3d4e3b7c 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftWorld.java
@@ -148,6 +148,7 @@ import org.bukkit.util.Vector;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.GameRuleUpdatePacket;
 import puregero.multipaper.externalserverprotocol.TimeUpdatePacket;
 
 public class CraftWorld extends CraftRegionAccessor implements World {
@@ -2091,6 +2092,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         GameRule<?> gameRule = GameRule.getByName(rule);
         io.papermc.paper.event.world.WorldGameRuleChangeEvent event = new io.papermc.paper.event.world.WorldGameRuleChangeEvent(this, null, gameRule, value);
         if (!event.callEvent()) return false;
+        GameRuleUpdatePacket.onGameRuleChange(event.getWorld(), event.getGameRule().getName(), event.getValue()); // MultiPaper
         // Paper end - Add WorldGameRuleChangeEvent
         GameRules.Value<?> handle = this.getHandle().getGameRules().getRule(CraftWorld.getGameRulesNMS().get(rule));
         handle.deserialize(event.getValue()); // Paper - Add WorldGameRuleChangeEvent
@@ -2132,6 +2134,7 @@ public class CraftWorld extends CraftRegionAccessor implements World {
         // Paper start - Add WorldGameRuleChangeEvent
         io.papermc.paper.event.world.WorldGameRuleChangeEvent event = new io.papermc.paper.event.world.WorldGameRuleChangeEvent(this, null, rule, String.valueOf(newValue));
         if (!event.callEvent()) return false;
+        GameRuleUpdatePacket.onGameRuleChange(event.getWorld(), event.getGameRule().getName(), event.getValue()); // MultiPaper
         // Paper end - Add WorldGameRuleChangeEvent
         GameRules.Value<?> handle = this.getHandle().getGameRules().getRule(CraftWorld.getGameRulesNMS().get(rule.getName()));
         handle.deserialize(event.getValue()); // Paper - Add WorldGameRuleChangeEvent
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index c59d149f703b8ad4452ca92a860bb43d00c18f7e..535542deade6ae177a4fa606c22b3aa29246cd41 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -56,6 +56,7 @@ public class ExternalServerPacketSerializer {
         addPacket(PlayerSayChatPacket.class, PlayerSayChatPacket::new);
         addPacket(PlayerFoodUpdatePacket.class, PlayerFoodUpdatePacket::new);
         addPacket(EntityUpdateEffectPacket.class, EntityUpdateEffectPacket::new);
+        addPacket(GameRuleUpdatePacket.class, GameRuleUpdatePacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/GameRuleUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/GameRuleUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..dbe6646c697e7cae7e22ae78740aab39aa73aac2
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/GameRuleUpdatePacket.java
@@ -0,0 +1,53 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+public class GameRuleUpdatePacket extends ExternalServerPacket {
+
+    private static boolean updatingGamerules = false;
+
+    private final String world;
+    private final String name;
+    private final String value;
+
+    public GameRuleUpdatePacket(World world, String name, String value) {
+        this.world = world.getName();
+        this.name = name;
+        this.value = value;
+    }
+
+    public GameRuleUpdatePacket(FriendlyByteBuf in) {
+        world = in.readUtf();
+        name = in.readUtf();
+        value = in.readUtf();
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(world);
+        out.writeUtf(name);
+        out.writeUtf(value);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            World bukkitWorld = Bukkit.getWorld(world);
+            if (bukkitWorld != null) {
+                updatingGamerules = true;
+                bukkitWorld.setGameRuleValue(name, value);
+                updatingGamerules = false;
+            }
+        });
+    }
+
+    public static void onGameRuleChange(World world, String name, String value) {
+        if (!updatingGamerules) {
+            MultiPaper.broadcastPacketToExternalServers(new GameRuleUpdatePacket(world, name, value));
+        }
+    }
+}
