From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Fri, 11 Feb 2022 00:13:18 +1000
Subject: [PATCH] Sync scoreboards


diff --git a/src/main/java/net/minecraft/server/ServerScoreboard.java b/src/main/java/net/minecraft/server/ServerScoreboard.java
index 76d67d01388ecc1af6b43212e018edc678e84d72..3b06f7f280bb9dad9d2f3e220f73fb17dad9a52a 100644
--- a/src/main/java/net/minecraft/server/ServerScoreboard.java
+++ b/src/main/java/net/minecraft/server/ServerScoreboard.java
@@ -25,6 +25,11 @@ import net.minecraft.world.scores.Score;
 import net.minecraft.world.scores.ScoreHolder;
 import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.ScoreboardSaveData;
+import org.bukkit.Bukkit;
+import org.bukkit.craftbukkit.scoreboard.CraftScoreboard;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.config.MultiPaperConfiguration;
+import puregero.multipaper.externalserverprotocol.ScoreboardUpdatePacket;
 
 public class ServerScoreboard extends Scoreboard {
 
@@ -319,11 +324,25 @@ public class ServerScoreboard extends Scoreboard {
 
     // CraftBukkit start - Send to players
     private void broadcastAll(Packet packet) {
+        if (Bukkit.getScoreboardManager() == null) return; // MultiPaper - Server hasn't started yet
+        boolean mainScoreboard = this == ((CraftScoreboard) Bukkit.getScoreboardManager().getMainScoreboard()).getHandle(); // MultiPaper
+
         for (ServerPlayer entityplayer : (List<ServerPlayer>) this.server.getPlayerList().players) {
-            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() == this) {
+            if (entityplayer.getBukkitEntity().getScoreboard().getHandle() == this && !(mainScoreboard && MultiPaper.isExternalPlayer(entityplayer))) { // MultiPaper - Don't external scoreboards that we sync to other players
                 entityplayer.connection.send(packet);
             }
         }
+
+        // MultiPaper start - Only sync the main scoreboard for now
+        if (mainScoreboard && MultiPaperConfiguration.get().syncSettings.syncScoreboards && !ScoreboardUpdatePacket.updating) {
+            if (packet instanceof ClientboundSetObjectivePacket setObjectivePacket) {
+                Objective objective = getObjective(setObjectivePacket.getObjectiveName());
+                MultiPaper.broadcastPacketToExternalServers(new ScoreboardUpdatePacket(null, objective != null ? objective.getCriteria() : null, packet));
+            } else {
+                MultiPaper.broadcastPacketToExternalServers(new ScoreboardUpdatePacket(null, packet));
+            }
+        }
+        // MultiPaper end
     }
     // CraftBukkit end
 
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index 6372059d1dcf276dc58d06e7fd0ebf3047d3a6c4..51dd026b70a90cff96242783457a49d02dce7a75 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -66,6 +66,7 @@ public class ExternalServerPacketSerializer {
         addPacket(PlayerSetRespawnPosition.class, PlayerSetRespawnPosition::new);
         addPacket(SpawnUpdatePacket.class, SpawnUpdatePacket::new);
         addPacket(DifficultyUpdatePacket.class, DifficultyUpdatePacket::new);
+        addPacket(ScoreboardUpdatePacket.class, ScoreboardUpdatePacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/HelloPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/HelloPacket.java
index 1da0d84762fcc0566d47974db3d927735ff592f7..2441eb28b97f930d4ec798c5b35954b497aae877 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/HelloPacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/HelloPacket.java
@@ -3,6 +3,12 @@ package puregero.multipaper.externalserverprotocol;
 import io.netty.channel.ChannelOutboundHandlerAdapter;
 import io.netty.handler.codec.compression.Zstd;
 import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.game.ClientboundSetPlayerTeamPacket;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.ServerScoreboard;
+import net.minecraft.world.scores.Objective;
+import net.minecraft.world.scores.PlayerTeam;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 import org.bukkit.Bukkit;
@@ -13,6 +19,9 @@ import puregero.multipaper.config.MultiPaperConfiguration;
 import puregero.multipaper.mastermessagingprotocol.MessageLengthEncoder;
 
 import java.net.InetSocketAddress;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
 import java.util.concurrent.CompletableFuture;
 import java.util.concurrent.TimeUnit;
 
@@ -116,5 +125,38 @@ public class HelloPacket extends ExternalServerPacket {
                 connection.send(new SubscribeToWorldPacket(world.getName()));
             }
         });
+
+        if (MultiPaperConfiguration.get().syncSettings.syncScoreboards) {
+            MultiPaper.runSync(() -> {
+                // Only send scoreboards if we haven't just loaded
+                if (MinecraftServer.getServer().getTickCount() > 5) {
+                    sendScoreboard(MinecraftServer.getServer().getScoreboard(), connection);
+                }
+            });
+        }
+    }
+
+    private void sendScoreboard(ServerScoreboard scoreboard, ExternalServerConnection connection) {
+        String scoreboardId = null;
+
+        Set<Objective> set = new HashSet<>();
+
+        for (PlayerTeam scoreboardteam : scoreboard.getPlayerTeams()) {
+            connection.send(new ScoreboardUpdatePacket(scoreboardId, ClientboundSetPlayerTeamPacket.createAddOrModifyPacket(scoreboardteam, true)));
+        }
+
+        for (int i = 0; i < 19; ++i) {
+            Objective scoreboardobjective = scoreboard.getDisplayObjective(i);
+
+            if (scoreboardobjective != null && !set.contains(scoreboardobjective)) {
+                List<Packet<?>> list = scoreboard.getStartTrackingPackets(scoreboardobjective);
+
+                for (Packet<?> value : list) {
+                    connection.send(new ScoreboardUpdatePacket(scoreboardId, scoreboardobjective.getCriteria(), value));
+                }
+
+                set.add(scoreboardobjective);
+            }
+        }
     }
 }
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ScoreboardUpdatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/ScoreboardUpdatePacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..a31139db7e5035f6e24b9675528381da5af0464d
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ScoreboardUpdatePacket.java
@@ -0,0 +1,166 @@
+package puregero.multipaper.externalserverprotocol;
+
+import io.netty.buffer.ByteBuf;
+import io.netty.buffer.Unpooled;
+import net.minecraft.network.ConnectionProtocol;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.network.protocol.PacketFlow;
+import net.minecraft.network.protocol.game.*;
+import net.minecraft.server.MinecraftServer;
+import net.minecraft.server.ServerScoreboard;
+import net.minecraft.world.scores.Objective;
+import net.minecraft.world.scores.PlayerTeam;
+import net.minecraft.world.scores.Score;
+import net.minecraft.world.scores.Team;
+import net.minecraft.world.scores.criteria.ObjectiveCriteria;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import javax.annotation.Nullable;
+
+public class ScoreboardUpdatePacket extends ExternalServerPacket {
+
+    private static final Logger LOGGER = LogManager.getLogger(ScoreboardUpdatePacket.class.getSimpleName());
+    public static boolean updating = false;
+
+    @Nullable
+    private final String scoreboardId;
+    @Nullable
+    private final String criteria;
+    private final Packet<?> packet;
+
+    public ScoreboardUpdatePacket(@Nullable String scoreboard, Packet<?> packet) {
+        this(scoreboard, null, packet);
+    }
+
+    public ScoreboardUpdatePacket(@Nullable String scoreboard, @Nullable ObjectiveCriteria criteria, Packet<?> packet) {
+        this.scoreboardId = scoreboard;
+        this.criteria = criteria == null ? null : criteria.getName();
+        this.packet = packet;
+    }
+
+    public ScoreboardUpdatePacket(FriendlyByteBuf in) {
+        String scoreboard = in.readUtf();
+        this.scoreboardId = scoreboard.isEmpty() ? null : scoreboard;
+
+        String criteria = in.readUtf();
+        this.criteria = criteria.isEmpty() ? null : criteria;
+
+        byte[] bytes = in.readByteArray();
+        ByteBuf buf = Unpooled.wrappedBuffer(bytes);
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        int packetId = friendlyByteBuf.readVarInt();
+        packet = ConnectionProtocol.PLAY.createPacket(PacketFlow.CLIENTBOUND, packetId, friendlyByteBuf);
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUtf(scoreboardId == null ? "" : scoreboardId);
+
+        out.writeUtf(criteria == null ? "" : criteria);
+
+        ConnectionProtocol protocol = ConnectionProtocol.getProtocolForPacket(packet);
+        Integer id = protocol.getPacketId(PacketFlow.CLIENTBOUND, packet);
+        ByteBuf buf = Unpooled.buffer();
+        FriendlyByteBuf friendlyByteBuf = new FriendlyByteBuf(buf);
+        friendlyByteBuf.writeVarInt(id);
+        packet.write(friendlyByteBuf);
+        out.writeByteArray(buf.array());
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            if (scoreboardId != null) {
+                throw new UnsupportedOperationException("Modifying scoreboard '" + scoreboardId + "' is not supported!");
+            }
+
+            updating = true;
+
+            ServerScoreboard scoreboard = MinecraftServer.getServer().getScoreboard();
+
+            if (packet instanceof ClientboundSetPlayerTeamPacket setPlayerTeamPacket) {
+                handle(scoreboard, setPlayerTeamPacket);
+            } else if (packet instanceof ClientboundSetScorePacket setScorePacket) {
+                handle(scoreboard, setScorePacket);
+            } else if (packet instanceof ClientboundSetObjectivePacket setObjectivePacket) {
+                handle(scoreboard, criteria, setObjectivePacket);
+            } else if (packet instanceof ClientboundSetDisplayObjectivePacket setDisplayObjectivePacket) {
+                handle(scoreboard, setDisplayObjectivePacket);
+            } else {
+                LOGGER.warn("Unhandled scoreboard update packet " + packet);
+            }
+
+            updating = false;
+        });
+    }
+
+    private void handle(ServerScoreboard scoreboard, ClientboundSetPlayerTeamPacket setPlayerTeamPacket) {
+        PlayerTeam team = scoreboard.getPlayerTeam(setPlayerTeamPacket.getName());
+
+        if (setPlayerTeamPacket.getTeamAction() == ClientboundSetPlayerTeamPacket.Action.ADD && team == null) {
+            team = scoreboard.addPlayerTeam(setPlayerTeamPacket.getName());
+        } else if (setPlayerTeamPacket.getTeamAction() == ClientboundSetPlayerTeamPacket.Action.REMOVE) {
+            scoreboard.removePlayerTeam(team);
+        }
+
+        try {
+            if (setPlayerTeamPacket.getPlayerAction() == ClientboundSetPlayerTeamPacket.Action.ADD) {
+                for (String player : setPlayerTeamPacket.getPlayers()) {
+                    scoreboard.addPlayerToTeam(player, team);
+                }
+            } else if (setPlayerTeamPacket.getPlayerAction() == ClientboundSetPlayerTeamPacket.Action.REMOVE) {
+                for (String player : setPlayerTeamPacket.getPlayers()) {
+                    scoreboard.removePlayerFromTeam(player, team);
+                }
+            }
+        } catch (Exception e) {
+            // These can be usually safely ignored, just an innocent race condition
+        }
+
+        if (setPlayerTeamPacket.getParameters().isPresent()) {
+            ClientboundSetPlayerTeamPacket.Parameters parameters = setPlayerTeamPacket.getParameters().get();
+            team.setDisplayName(parameters.getDisplayName());
+            team.unpackOptions(team.packOptions());
+            team.setNameTagVisibility(Team.Visibility.byName(parameters.getNametagVisibility()));
+            team.setCollisionRule(Team.CollisionRule.byName(parameters.getCollisionRule()));
+            team.setColor(parameters.getColor());
+            team.setPlayerPrefix(parameters.getPlayerPrefix());
+            team.setPlayerSuffix(parameters.getPlayerSuffix());
+        }
+    }
+
+    private void handle(ServerScoreboard scoreboard, ClientboundSetScorePacket setScorePacket) {
+        Objective objective = scoreboard.getObjective(setScorePacket.getObjectiveName());
+
+        if (setScorePacket.getMethod() == ServerScoreboard.Method.CHANGE) {
+            Score score = scoreboard.getOrCreatePlayerScore(setScorePacket.getOwner(), objective);
+            score.setScore(setScorePacket.getScore());
+        } else if (setScorePacket.getMethod() == ServerScoreboard.Method.REMOVE) {
+            scoreboard.resetPlayerScore(setScorePacket.getOwner(), objective);
+        }
+    }
+
+    private void handle(ServerScoreboard scoreboard, String criteria, ClientboundSetObjectivePacket setObjectivePacket) {
+        Objective objective = scoreboard.getObjective(setObjectivePacket.getObjectiveName());
+        ObjectiveCriteria objectiveCriteria = criteria == null ? null : ObjectiveCriteria.byName(criteria).get();
+
+        if (setObjectivePacket.getMethod() == ClientboundSetObjectivePacket.METHOD_ADD && objective == null) {
+            objective = scoreboard.addObjective(setObjectivePacket.getObjectiveName(), objectiveCriteria, setObjectivePacket.getDisplayName(), setObjectivePacket.getRenderType());
+        } else if (setObjectivePacket.getMethod() == ClientboundSetObjectivePacket.METHOD_REMOVE) {
+            scoreboard.removeObjective(objective);
+        } if (setObjectivePacket.getMethod() == ClientboundSetObjectivePacket.METHOD_CHANGE || setObjectivePacket.getMethod() == ClientboundSetObjectivePacket.METHOD_ADD) {
+            objective.setDisplayName(setObjectivePacket.getDisplayName());
+            objective.setRenderType(setObjectivePacket.getRenderType());
+        }
+    }
+
+    private void handle(ServerScoreboard scoreboard, ClientboundSetDisplayObjectivePacket setDisplayObjectivePacket) {
+        Objective objective = scoreboard.getObjective(setDisplayObjectivePacket.getObjectiveName());
+
+        scoreboard.setDisplayObjective(setDisplayObjectivePacket.getSlot(), objective);
+    }
+}
