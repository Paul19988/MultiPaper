From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 29 Jan 2022 20:22:06 +1000
Subject: [PATCH] Only save non-modified chunks


diff --git a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
index ad1eeebe6de219143492b94da309cb54ae9e0a5b..03e147d5ef718433e2210a800e001609b814cd46 100644
--- a/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
+++ b/src/main/java/ca/spottedleaf/starlight/common/light/StarLightEngine.java
@@ -427,6 +427,8 @@ public abstract class StarLightEngine {
                 this.propagateBlockChanges(lightAccess, chunk, positions);
             }
             this.updateVisible(lightAccess);
+
+            chunk.setUnsaved(true); // MultiPaper
         } finally {
             this.destroyCaches();
         }
@@ -906,6 +908,8 @@ public abstract class StarLightEngine {
             this.lightChunk(lightAccess, chunk, true);
             this.setNibbles(chunk, nibbles);
             this.updateVisible(lightAccess);
+
+            chunk.setUnsaved(true); // MultiPaper
         } finally {
             this.destroyCaches();
         }
@@ -1004,6 +1008,8 @@ public abstract class StarLightEngine {
                     }
 
                     this.lightChunk(lightAccess, neighbour, false);
+
+                    neighbour.setUnsaved(true); // MultiPaper
                 } finally {
                     this.destroyCaches();
                 }
@@ -1028,6 +1034,8 @@ public abstract class StarLightEngine {
                 chunkLightCallback.accept(chunkPos);
             }
             ++lightCalls;
+
+            chunk.setUnsaved(true); // MultiPaper
         }
 
         if (onComplete != null) {
diff --git a/src/main/java/net/minecraft/world/level/LevelAccessor.java b/src/main/java/net/minecraft/world/level/LevelAccessor.java
index 4e7d380d7ac6ab16c4b26c0de7b206c516235f17..b6499ef4e010dd588a7e9e173d7cddc0adab5602 100644
--- a/src/main/java/net/minecraft/world/level/LevelAccessor.java
+++ b/src/main/java/net/minecraft/world/level/LevelAccessor.java
@@ -15,6 +15,7 @@ import net.minecraft.world.entity.player.Player;
 import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.state.BlockState;
 import net.minecraft.world.level.chunk.ChunkSource;
+import net.minecraft.world.level.chunk.LevelChunk;
 import net.minecraft.world.level.gameevent.GameEvent;
 import net.minecraft.world.level.material.Fluid;
 import net.minecraft.world.level.redstone.NeighborUpdater;
@@ -45,11 +46,13 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
     }
 
     default void scheduleTick(BlockPos pos, Block block, int delay, TickPriority priority) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getBlockTicks().schedule(this.createTick(pos, block, delay, priority));
     }
 
     default void scheduleTick(BlockPos pos, Block block, int delay) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getBlockTicks().schedule(this.createTick(pos, block, delay));
     }
@@ -57,11 +60,13 @@ public interface LevelAccessor extends CommonLevelAccessor, LevelTimeAccess {
     LevelTickAccess<Fluid> getFluidTicks();
 
     default void scheduleTick(BlockPos pos, Fluid fluid, int delay, TickPriority priority) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getFluidTicks().schedule(this.createTick(pos, fluid, delay, priority));
     }
 
     default void scheduleTick(BlockPos pos, Fluid fluid, int delay) {
+        if (this.getChunkIfLoadedImmediately(pos.getX() >> 4, pos.getZ() >> 4) instanceof LevelChunk levelChunk) levelChunk.setUnsaved(true); // MultiPaper
         MultiPaperExternalBlocksHandler.onBlockScheduled(getMinecraftWorld(), pos);
         this.getFluidTicks().schedule(this.createTick(pos, fluid, delay));
     }
diff --git a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
index 8edb2f4a60d65b5ddf1c1792d21488ffe479e4fa..252a759479f37334f436c69aaa29ffcc58057d43 100644
--- a/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
+++ b/src/main/java/net/minecraft/world/level/chunk/storage/ChunkSerializer.java
@@ -351,6 +351,7 @@ public class ChunkSerializer {
 
         ((ChunkAccess) object1).setAllStarts(ChunkSerializer.unpackStructureStart(StructurePieceSerializationContext.fromLevel(world), nbttagcompound3, world.getSeed()));
         ((ChunkAccess) object1).setAllReferences(ChunkSerializer.unpackStructureReferences(world.registryAccess(), chunkPos, nbttagcompound3));
+        ((ChunkAccess) object1).setUnsaved(false); // MultiPaper - No point saving something that we just loaded
         if (nbt.getBoolean("shouldSave")) {
             ((ChunkAccess) object1).setUnsaved(true);
         }
