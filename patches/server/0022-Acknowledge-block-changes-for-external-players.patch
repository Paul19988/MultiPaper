From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 10 Jul 2022 21:13:49 +1000
Subject: [PATCH] Acknowledge block changes for external players


diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 684abd8b367b6c450274ff96442c8c6ab66a5b7d..482f459fa0cf3c8a400e94b1c02bf6f2e038d8ca 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -243,6 +243,7 @@ import org.bukkit.inventory.InventoryView;
 import org.bukkit.inventory.SmithingInventory;
 import puregero.multipaper.ExternalPlayer;
 import puregero.multipaper.MultiPaper;
+import puregero.multipaper.MultiPaperAckBlockChangesHandler;
 import puregero.multipaper.externalserverprotocol.PlayerRemovePacket;
 // CraftBukkit end
 
@@ -256,7 +257,7 @@ public class ServerGamePacketListenerImpl extends ServerCommonPacketListenerImpl
     public ServerPlayer player;
     public final PlayerChunkSender chunkSender;
     private int tickCount;
-    private int ackBlockChangesUpTo = -1;
+    public int ackBlockChangesUpTo = -1; // MultiPaper - make public
     // CraftBukkit start - multithreaded fields
     private final AtomicInteger chatSpamTickCount = new AtomicInteger();
     private final java.util.concurrent.atomic.AtomicInteger tabSpamLimiter = new java.util.concurrent.atomic.AtomicInteger(); // Paper - configurable tab spam limits
diff --git a/src/main/java/puregero/multipaper/MultiPaper.java b/src/main/java/puregero/multipaper/MultiPaper.java
index 8d9f72a4554c1ab15be8c5f83bb68f35dbe3cbd5..57ed0341e4f5310905e1f6eaf69df5ab60f525bd 100644
--- a/src/main/java/puregero/multipaper/MultiPaper.java
+++ b/src/main/java/puregero/multipaper/MultiPaper.java
@@ -119,6 +119,8 @@ public class MultiPaper {
                 // Ignore - plugins doing async things (HuskSync specifically)
             }
         });
+
+        MultiPaperAckBlockChangesHandler.tick();
     }
 
     public static void sendTickTime(long time, double tps) {
diff --git a/src/main/java/puregero/multipaper/MultiPaperAckBlockChangesHandler.java b/src/main/java/puregero/multipaper/MultiPaperAckBlockChangesHandler.java
new file mode 100644
index 0000000000000000000000000000000000000000..2bc745f29e5ad8820a1b85f4b298dd61da7420ea
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperAckBlockChangesHandler.java
@@ -0,0 +1,28 @@
+package puregero.multipaper;
+
+import it.unimi.dsi.fastutil.objects.ObjectLinkedOpenHashSet;
+import net.minecraft.network.protocol.game.ClientboundBlockChangedAckPacket;
+import net.minecraft.server.level.ServerPlayer;
+import java.util.Set;
+
+public class MultiPaperAckBlockChangesHandler {
+    private final static Set<ExternalPlayer> ackBlockChangesQueue = new ObjectLinkedOpenHashSet<>(); // Linked set for faster iteration
+
+    public static void tick() {
+        if (!ackBlockChangesQueue.isEmpty()) {
+            for (ExternalPlayer player : ackBlockChangesQueue) {
+                if (player.connection.ackBlockChangesUpTo > -1) {
+                    player.connection.send(new ClientboundBlockChangedAckPacket(player.connection.ackBlockChangesUpTo));
+                    player.connection.ackBlockChangesUpTo = -1;
+                }
+            }
+            ackBlockChangesQueue.clear();
+        }
+    }
+
+    public static void onAckNeeded(ServerPlayer player) {
+        if (player instanceof ExternalPlayer externalPlayer) {
+            ackBlockChangesQueue.add(externalPlayer);
+        }
+    }
+}
\ No newline at end of file
