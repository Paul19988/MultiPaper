From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sun, 28 Nov 2021 16:34:05 +1000
Subject: [PATCH] Sync ender dragon fight


diff --git a/src/main/java/net/minecraft/server/level/ServerBossEvent.java b/src/main/java/net/minecraft/server/level/ServerBossEvent.java
index 4f91107f9ae42f96c060c310596db9aa869a8dbc..92a02c82aa0277ff4199fd5a0a94b843677cc948 100644
--- a/src/main/java/net/minecraft/server/level/ServerBossEvent.java
+++ b/src/main/java/net/minecraft/server/level/ServerBossEvent.java
@@ -6,6 +6,7 @@ import com.google.common.collect.Sets;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Set;
+import java.util.UUID;
 import java.util.function.Function;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.game.ClientboundBossEventPacket;
@@ -17,6 +18,12 @@ public class ServerBossEvent extends BossEvent {
     private final Set<ServerPlayer> unmodifiablePlayers = Collections.unmodifiableSet(this.players);
     public boolean visible = true;
 
+    // MultiPaper start - allow for a specified uuid
+    public ServerBossEvent(UUID uuid, Component displayName, BossEvent.BossBarColor color, BossEvent.BossBarOverlay style) {
+        super(uuid, displayName, color, style);
+    }
+    // MultiPaper end - allow for a specified uuid
+
     public ServerBossEvent(Component displayName, BossEvent.BossBarColor color, BossEvent.BossBarOverlay style) {
         super(Mth.createInsecureUUID(), displayName, color, style);
     }
diff --git a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
index d4f903c402765c6e8e1db99e148613748f530726..c5353e12741f612de08c9e4e81d9b30f2a3952ac 100644
--- a/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
+++ b/src/main/java/net/minecraft/world/level/dimension/end/EndDragonFight.java
@@ -60,6 +60,8 @@ import net.minecraft.world.level.levelgen.feature.SpikeFeature;
 import net.minecraft.world.level.levelgen.feature.configurations.FeatureConfiguration;
 import net.minecraft.world.phys.AABB;
 import org.slf4j.Logger;
+import puregero.multipaper.MultiPaper;
+import puregero.multipaper.externalserverprotocol.SetEndDragonFightDataPacket;
 
 public class EndDragonFight {
 
@@ -96,13 +98,14 @@ public class EndDragonFight {
     private int respawnTime;
     @Nullable
     public List<EndCrystal> respawnCrystals;
+    private final long gatewaysSeed; // MultiPaper - add ender dragon fight syncing
 
     public EndDragonFight(ServerLevel world, long gatewaysSeed, EndDragonFight.Data data) {
         this(world, gatewaysSeed, data, BlockPos.ZERO);
     }
 
     public EndDragonFight(ServerLevel world, long gatewaysSeed, EndDragonFight.Data data, BlockPos origin) {
-        this.dragonEvent = (ServerBossEvent) (new ServerBossEvent(DEFAULT_BOSS_EVENT_NAME, BossEvent.BossBarColor.PINK, BossEvent.BossBarOverlay.PROGRESS)).setPlayBossMusic(true).setCreateWorldFog(true); // Paper - ensure reset EnderDragon boss event name
+        this.dragonEvent = (ServerBossEvent) (new ServerBossEvent(UUID.fromString("479e9726-3019-4c90-8bef-0da73cb1ee85"), DEFAULT_BOSS_EVENT_NAME, BossEvent.BossBarColor.PINK, BossEvent.BossBarOverlay.PROGRESS)).setPlayBossMusic(true).setCreateWorldFog(true); // Paper // MultiPaper - add specific uuid
         this.gateways = new ObjectArrayList();
         this.ticksSinceLastPlayerScan = 21;
         this.skipArenaLoadedCheck = false;
@@ -114,6 +117,17 @@ public class EndDragonFight {
         this.level = world;
         this.origin = origin;
         this.validPlayer = EntitySelector.ENTITY_STILL_ALIVE.and(EntitySelector.withinDistance((double) origin.getX(), (double) (128 + origin.getY()), (double) origin.getZ(), 192.0D));
+        // MultiPaper start - add ender dragon fight syncing
+        this.gatewaysSeed = gatewaysSeed;
+        this.exitPortalPattern = BlockPatternBuilder.start().aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("  ###  ", " #   # ", "#     #", "#  #  #", "#     #", " #   # ", "  ###  ").aisle("       ", "  ###  ", " ##### ", " ##### ", " ##### ", "  ###  ", "       ").where('#', BlockInWorld.hasState(BlockPredicate.forBlock(Blocks.BEDROCK))).build();
+    }
+
+    public void sendDataSync() {
+        MultiPaper.broadcastPacketToExternalServers(new SetEndDragonFightDataPacket(this.level, this.saveData()));
+    }
+
+    public void load(EndDragonFight.Data data) {
+        // MultiPaper end - add ender dragon fight syncing
         this.needsStateScanning = data.needsStateScanning;
         this.dragonUUID = (UUID) data.dragonUUID.orElse(null); // CraftBukkit - decompile error
         this.dragonKilled = data.dragonKilled;
@@ -123,13 +137,14 @@ public class EndDragonFight {
         }
 
         this.portalLocation = (BlockPos) data.exitPortalLocation.orElse(null); // CraftBukkit - decompile error
+        this.gateways.clear(); // MultiPaper
         this.gateways.addAll((Collection) data.gateways.orElseGet(() -> {
             ObjectArrayList<Integer> objectarraylist = new ObjectArrayList(ContiguousSet.create(Range.closedOpen(0, 20), DiscreteDomain.integers()));
 
             Util.shuffle(objectarraylist, RandomSource.create(gatewaysSeed));
             return objectarraylist;
         }));
-        this.exitPortalPattern = BlockPatternBuilder.start().aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("       ", "       ", "       ", "   #   ", "       ", "       ", "       ").aisle("  ###  ", " #   # ", "#     #", "#  #  #", "#     #", " #   # ", "  ###  ").aisle("       ", "  ###  ", " ##### ", " ##### ", " ##### ", "  ###  ", "       ").where('#', BlockInWorld.hasState(BlockPredicate.forBlock(Blocks.BEDROCK))).build();
+        // MultiPaper - move up
     }
 
     /** @deprecated */
@@ -151,7 +166,8 @@ public class EndDragonFight {
         }
 
         if (!this.dragonEvent.getPlayers().isEmpty()) {
-            this.level.getChunkSource().addRegionTicket(TicketType.DRAGON, new ChunkPos(0, 0), 9, Unit.INSTANCE);
+            if (this.dragonEvent.getPlayers().stream().anyMatch(MultiPaper::isRealPlayer)) this.level.getChunkSource().addRegionTicket(TicketType.DRAGON, new ChunkPos(0, 0), 9, Unit.INSTANCE); // MultiPaper - only request chunk ownership if we have a player there
+            if (!MultiPaper.isChunkLocal(this.level, new BlockPos(0, 0, 0))) return; // MultiPaper - only tick the dragon if we own the end island
             boolean flag = this.isArenaLoaded();
 
             if (this.needsStateScanning && flag) {
@@ -221,6 +237,7 @@ public class EndDragonFight {
             this.dragonKilled = false;
         }
 
+        this.sendDataSync(); // MultiPaper
     }
 
     private void findOrCreateDragon() {
@@ -232,6 +249,7 @@ public class EndDragonFight {
         } else {
             EndDragonFight.LOGGER.debug("Haven't seen our dragon, but found another one to use.");
             this.dragonUUID = ((EnderDragon) list.get(0)).getUUID();
+            this.sendDataSync(); // MultiPaper
         }
 
     }
@@ -258,6 +276,7 @@ public class EndDragonFight {
             } else {
                 this.respawnStage = spawnState;
             }
+            this.sendDataSync(); // MultiPaper
 
         }
     }
@@ -428,6 +447,7 @@ public class EndDragonFight {
 
             this.previouslyKilled = true;
             this.dragonKilled = true;
+            this.sendDataSync(); // MultiPaper
         }
 
     }
@@ -464,6 +484,7 @@ public class EndDragonFight {
             int k = Mth.floor(96.0D * Math.sin(2.0D * (-3.141592653589793D + 0.15707963267948966D * (double) i)));
 
             this.spawnNewGateway(new BlockPos(j, 75, k));
+            this.sendDataSync(); // MultiPaper
         }
     }
 
@@ -511,6 +532,7 @@ public class EndDragonFight {
             this.level.addFreshEntity(entityenderdragon);
             this.dragonUUID = entityenderdragon.getUUID();
             this.resetSpikeCrystals(); // Paper - Reset ender crystals on dragon spawn
+            this.sendDataSync(); // MultiPaper
         }
 
         return entityenderdragon;
@@ -542,6 +564,7 @@ public class EndDragonFight {
             this.respawnTime = 0;
             this.resetSpikeCrystals();
             this.spawnExitPortal(true);
+            this.sendDataSync(); // MultiPaper
         } else {
             this.updateCrystalCount();
             Entity entity = this.level.getEntity(this.dragonUUID);
@@ -638,6 +661,7 @@ public class EndDragonFight {
             this.respawnTime = 0;
             this.spawnExitPortal(false);
             this.respawnCrystals = list;
+            this.sendDataSync(); // MultiPaper
             return true; // CraftBukkit - return value
         }
         return false; // CraftBukkit - return value
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
index ff5b08a3e27643b5e3153f3f058fd0a86090b347..868835ed6d8f1559daef7720c4f97faa6a30d25f 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/ExternalServerPacketSerializer.java
@@ -44,6 +44,7 @@ public class ExternalServerPacketSerializer {
         addPacket(EntityRemovePacket.class, EntityRemovePacket::new);
         addPacket(PlayerActionOnEntityPacket.class, PlayerActionOnEntityPacket::new);
         addPacket(PlayerTouchEntityPacket.class, PlayerTouchEntityPacket::new);
+        addPacket(SetEndDragonFightDataPacket.class, SetEndDragonFightDataPacket::new);
     }
 
     private static void addPacket(Class<? extends ExternalServerPacket> clazz, Function<FriendlyByteBuf, ExternalServerPacket> deserializer) {
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/SetEndDragonFightDataPacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/SetEndDragonFightDataPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..e13ee06225c73bcab684d41341a84f582a153cb8
--- /dev/null
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/SetEndDragonFightDataPacket.java
@@ -0,0 +1,50 @@
+package puregero.multipaper.externalserverprotocol;
+
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.server.level.ServerLevel;
+import net.minecraft.world.level.dimension.end.EndDragonFight;
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import org.bukkit.Bukkit;
+import org.bukkit.World;
+import org.bukkit.craftbukkit.CraftWorld;
+import puregero.multipaper.ExternalServerConnection;
+import puregero.multipaper.MultiPaper;
+
+import java.util.UUID;
+
+public class SetEndDragonFightDataPacket extends ExternalServerPacket {
+    private static final Logger LOGGER = LogManager.getLogger(SetEndDragonFightDataPacket.class.getSimpleName());
+
+    private final UUID world;
+    private final EndDragonFight.Data data;
+
+    public SetEndDragonFightDataPacket(ServerLevel level, EndDragonFight.Data data) {
+        this.world = level.getWorld().getUID();
+        this.data = data;
+    }
+
+    public SetEndDragonFightDataPacket(FriendlyByteBuf in) {
+        this.world = in.readUUID();
+        this.data = in.readJsonWithCodec(EndDragonFight.Data.CODEC);
+    }
+
+    @Override
+    public void write(FriendlyByteBuf out) {
+        out.writeUUID(this.world);
+        out.writeJsonWithCodec(EndDragonFight.Data.CODEC, this.data);
+    }
+
+    @Override
+    public void handle(ExternalServerConnection connection) {
+        MultiPaper.runSync(() -> {
+            World world = Bukkit.getWorld(this.world);
+            if (world instanceof CraftWorld craftWorld) {
+                EndDragonFight endDragonFight = craftWorld.getHandle().getDragonFight();
+                if (endDragonFight != null) {
+                    endDragonFight.load(this.data);
+                }
+            }
+        });
+    }
+}
