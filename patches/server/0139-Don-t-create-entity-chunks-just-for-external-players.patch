From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Wed, 30 Aug 2023 19:13:36 +0900
Subject: [PATCH] Don't create entity chunks just for external players

Creating an entity chunk includes loading the chunk from disk, which is
unnecessary for external players, which don't need their chunks to be
loaded. This prevents all the servers from loading chunks for external
players, which is a huge performance boost.

diff --git a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
index 6a74599f669fa19ca5fe920d66ab84558808a764..3602eb66950f91a6da89939445c49f03f5b5e4cd 100644
--- a/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
+++ b/src/main/java/io/papermc/paper/chunk/system/entity/EntityLookup.java
@@ -29,6 +29,8 @@ import net.minecraft.world.phys.Vec3;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
 import org.slf4j.Logger;
+import puregero.multipaper.ExternalPlayer;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Iterator;
@@ -447,8 +449,8 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         entity.sectionX = sectionX;
         entity.sectionY = sectionY;
         entity.sectionZ = sectionZ;
-        final ChunkEntitySlices slices = this.getOrCreateChunk(sectionX, sectionZ);
-        if (!slices.addEntity(entity, sectionY)) {
+        final ChunkEntitySlices slices = entity instanceof ExternalPlayer ? this.getChunk(sectionX, sectionZ) : this.getOrCreateChunk(sectionX, sectionZ); // MultiPaper - don't create the chunk for externals players
+        if (slices != null && !slices.addEntity(entity, sectionY)) { // MultiPaper - don't create the chunk for externals players
             LOGGER.warn("Entity " + entity + " added to world '" + this.world.getWorld().getName() + "', but was already contained in entity chunk (" + sectionX + "," + sectionZ + ")");
         }
 
@@ -496,12 +498,14 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         final ChunkEntitySlices slices = this.getChunk(sectionX, sectionZ);
         // all entities should be in a chunk
         if (slices == null) {
+            if (!(entity instanceof ExternalPlayer)) // MultiPaper - don't create the chunk for externals players
             LOGGER.warn("Cannot remove entity " + entity + " from null entity slices (" + sectionX + "," + sectionZ + ")");
         } else {
             if (slices.isPreventingStatusUpdates()) {
                 throw new IllegalStateException("Attempting to remove entity " + entity + " from entity slices (" + sectionX + "," + sectionZ + ") that is receiving status updates");
             }
             if (!slices.removeEntity(entity, sectionY)) {
+                if (!(entity instanceof ExternalPlayer)) // MultiPaper - don't create the chunk for externals players
                 LOGGER.warn("Failed to remove entity " + entity + " from entity slices (" + sectionX + "," + sectionZ + ")");
             }
         }
@@ -540,13 +544,14 @@ public final class EntityLookup implements LevelEntityGetter<Entity> {
         TickThread.ensureTickThread(this.world, entity.sectionX, entity.sectionZ, "Cannot move entity off-main");
 
         final ChunkEntitySlices old = this.getChunk(entity.sectionX, entity.sectionZ);
-        final ChunkEntitySlices slices = this.getOrCreateChunk(newSectionX, newSectionZ);
+        final ChunkEntitySlices slices = entity instanceof ExternalPlayer ? this.getChunk(newSectionX, newSectionZ) : this.getOrCreateChunk(newSectionX, newSectionZ); // MultiPaper - don't create the chunk for externals players
 
-        if (!old.removeEntity(entity, entity.sectionY)) {
+        if (old != null && !old.removeEntity(entity, entity.sectionY)) { // MultiPaper - don't create the chunk for externals players
+            if (!(entity instanceof ExternalPlayer)) // MultiPaper - don't create the chunk for externals players
             LOGGER.warn("Could not remove entity " + entity + " from its old chunk section (" + entity.sectionX + "," + entity.sectionY + "," + entity.sectionZ + ") since it was not contained in the section");
         }
 
-        if (!slices.addEntity(entity, newSectionY)) {
+        if (slices != null && !slices.addEntity(entity, newSectionY)) { // MultiPaper - don't create the chunk for externals players
             LOGGER.warn("Could not add entity " + entity + " to its new chunk section (" + newSectionX + "," + newSectionY + "," + newSectionZ + ") as it is already contained in the section");
         }
 
diff --git a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
index e8bb247f1c79b10e7574cdb4749b3a99016559b7..9152cfa819e90dc065763a5a3ef10c47b695fa33 100644
--- a/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
+++ b/src/main/java/io/papermc/paper/world/ChunkEntitySlices.java
@@ -20,6 +20,7 @@ import net.minecraft.world.level.chunk.storage.EntityStorage;
 import net.minecraft.world.level.entity.Visibility;
 import net.minecraft.world.phys.AABB;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
+import puregero.multipaper.ExternalPlayer;
 import puregero.multipaper.MultiPaperEntitiesHandler;
 
 import java.util.ArrayList;
@@ -147,6 +148,11 @@ public final class ChunkEntitySlices {
                 } while ((toRemoveEntity = toRemove.poll()) != null);
             }
             // MultiPaper end
+            // MultiPaper start - remove external players anyway so that this chunk can be unloaded
+            if (entity instanceof ExternalPlayer) {
+                removeEntity(entity, entity.sectionY);
+            }
+            // MultiPaper end
         }
 
         return this.entities.size() != 0;
