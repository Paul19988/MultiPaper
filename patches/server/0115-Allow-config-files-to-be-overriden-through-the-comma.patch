From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Thu, 2 Jun 2022 16:35:35 +1000
Subject: [PATCH] Allow config files to be overriden through the command line


diff --git a/src/main/java/io/papermc/paper/configuration/Configurations.java b/src/main/java/io/papermc/paper/configuration/Configurations.java
index 218bf89fd7583d6db9f64754c4db8fcce5415bdb..87ca7c99fded2ae6c8aa08b78b2104b268f480c4 100644
--- a/src/main/java/io/papermc/paper/configuration/Configurations.java
+++ b/src/main/java/io/papermc/paper/configuration/Configurations.java
@@ -116,6 +116,21 @@ public abstract class Configurations<G, W> {
         }
     }
 
+    // MultiPaper start - allow command line override
+    private void setFromProperties(String prefix, ConfigurationNode node) {
+        for (Map.Entry<Object, Object> property : System.getProperties().entrySet()) {
+            if (property.getKey().toString().startsWith(prefix)) {
+                String key = property.getKey().toString().substring(prefix.length());
+                try {
+                    node.node((Object[]) key.split("\\.")).set(property.getValue());
+                } catch (SerializationException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+    // MultiPaper end - allow command line override
+
     protected G initializeGlobalConfiguration(final CheckedFunction<ConfigurationNode, G, SerializationException> creator) throws ConfigurateException {
         final Path configFile = this.globalFolder.resolve(this.globalConfigFileName);
         final YamlConfigurationLoader loader = this.createGlobalLoaderBuilder()
@@ -132,6 +147,7 @@ public abstract class Configurations<G, W> {
             this.verifyGlobalConfigVersion(node);
         }
         this.applyGlobalConfigTransformations(node);
+        setFromProperties("paper.global.", node); // MultiPaper - allow command line override
         final G instance = creator.apply(node);
         trySaveFileNode(loader, node, configFile.toString());
         return instance;
@@ -172,6 +188,7 @@ public abstract class Configurations<G, W> {
             this.verifyWorldConfigVersion(contextMap, node);
         }
         this.applyWorldConfigTransformations(contextMap, node);
+        setFromProperties("paper.world.defaults.", node); // MultiPaper - allow command line override
         final W instance = node.require(this.worldConfigClass);
         node.set(this.worldConfigClass, instance);
         trySaveFileNode(loader, node, configFile.toString());
diff --git a/src/main/java/net/minecraft/server/dedicated/Settings.java b/src/main/java/net/minecraft/server/dedicated/Settings.java
index 61bf3ccf998bcb9ebd80e983566e7181a73f0e30..fa82351c3ca94e3fd7d3ebb5d215fa51be37f019 100644
--- a/src/main/java/net/minecraft/server/dedicated/Settings.java
+++ b/src/main/java/net/minecraft/server/dedicated/Settings.java
@@ -40,6 +40,12 @@ public abstract class Settings<T extends Settings<T>> {
     }
 
     private String getOverride(String name, String value) {
+        // MultiPaper start - Allow properties to be set from the command line
+        if (System.getProperty("properties." + name) != null) {
+            return System.getProperty("properties." + name);
+        }
+        // MultiPaper end
+
         if ((this.options != null) && (this.options.has(name))) {
             return String.valueOf(this.options.valueOf(name));
         }
diff --git a/src/main/java/org/spigotmc/SpigotConfig.java b/src/main/java/org/spigotmc/SpigotConfig.java
index 6c260403d91d640da0473a3df56e1c5582459fde..77fdf1a3650f08cbe8bdbbc3bb2fb342e36236aa 100644
--- a/src/main/java/org/spigotmc/SpigotConfig.java
+++ b/src/main/java/org/spigotmc/SpigotConfig.java
@@ -141,12 +141,14 @@ public class SpigotConfig
 
     private static boolean getBoolean(String path, boolean def)
     {
+        if (System.getProperty("spigot." + path) != null) return Boolean.getBoolean("spigot." + path); // MultiPaper
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getBoolean( path, SpigotConfig.config.getBoolean( path ) );
     }
 
     private static int getInt(String path, int def)
     {
+        if (System.getProperty("spigot." + path) != null) return Integer.getInteger("spigot." + path); // MultiPaper
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getInt( path, SpigotConfig.config.getInt( path ) );
     }
@@ -159,12 +161,14 @@ public class SpigotConfig
 
     private static String getString(String path, String def)
     {
+        if (System.getProperty("spigot." + path) != null) return System.getProperty("spigot." + path); // MultiPaper
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getString( path, SpigotConfig.config.getString( path ) );
     }
 
     private static double getDouble(String path, double def)
     {
+        if (System.getProperty("spigot." + path) != null) return Double.parseDouble(System.getProperty("spigot." + path)); // MultiPaper
         SpigotConfig.config.addDefault( path, def );
         return SpigotConfig.config.getDouble( path, SpigotConfig.config.getDouble( path ) );
     }
diff --git a/src/main/java/org/spigotmc/SpigotWorldConfig.java b/src/main/java/org/spigotmc/SpigotWorldConfig.java
index 1cf6d4f854d89c515e48e1fb365eb95ff9340765..c1b3d24fed6c060d2eb332217d806550d8278a47 100644
--- a/src/main/java/org/spigotmc/SpigotWorldConfig.java
+++ b/src/main/java/org/spigotmc/SpigotWorldConfig.java
@@ -41,12 +41,16 @@ public class SpigotWorldConfig
 
     public boolean getBoolean(String path, boolean def)
     {
+        if (System.getProperty("spigot.world-settings." + this.worldName + "." + path) != null) return Boolean.getBoolean("spigot.world-settings." + this.worldName + "." + path); // MultiPaper
+        if (!this.config.contains( "world-settings." + this.worldName + "." + path) && System.getProperty("spigot.world-settings.default." + path) != null) return Boolean.getBoolean("spigot.world-settings.default." + path); // MultiPaper
         this.config.addDefault( "world-settings.default." + path, def );
         return this.config.getBoolean( "world-settings." + this.worldName + "." + path, this.config.getBoolean( "world-settings.default." + path ) );
     }
 
     public double getDouble(String path, double def)
     {
+        if (System.getProperty("spigot.world-settings." + this.worldName + "." + path) != null) return Double.parseDouble(System.getProperty("spigot.world-settings." + this.worldName + "." + path)); // MultiPaper
+        if (!this.config.contains( "world-settings." + this.worldName + "." + path) && System.getProperty("spigot.world-settings.default." + path) != null) return Double.parseDouble(System.getProperty("spigot.world-settings.default." + path)); // MultiPaper
         this.config.addDefault( "world-settings.default." + path, def );
         return this.config.getDouble( "world-settings." + this.worldName + "." + path, this.config.getDouble( "world-settings.default." + path ) );
     }
@@ -63,6 +67,8 @@ public class SpigotWorldConfig
     }
     public int getInt(String path, int def, boolean setDef)
     {
+        if (System.getProperty("spigot.world-settings." + this.worldName + "." + path) != null) return Integer.getInteger("spigot.world-settings." + this.worldName + "." + path); // MultiPaper
+        if (!this.config.contains( "world-settings." + this.worldName + "." + path) && System.getProperty("spigot.world-settings.default." + path) != null) return Integer.getInteger("spigot.world-settings.default." + path); // MultiPaper
         if (setDef) this.config.addDefault( "world-settings.default." + path, def );
         return this.config.getInt( "world-settings." + this.worldName + "." + path, this.config.getInt( "world-settings.default." + path, def ) );
         // Paper end
@@ -76,6 +82,8 @@ public class SpigotWorldConfig
 
     public String getString(String path, String def)
     {
+        if (System.getProperty("spigot.world-settings." + this.worldName + "." + path) != null) return System.getProperty("spigot.world-settings." + this.worldName + "." + path); // MultiPaper
+        if (!this.config.contains( "world-settings." + this.worldName + "." + path) && System.getProperty("spigot.world-settings.default." + path) != null) return System.getProperty("spigot.world-settings.default." + path); // MultiPaper
         this.config.addDefault( "world-settings.default." + path, def );
         return this.config.getString( "world-settings." + this.worldName + "." + path, this.config.getString( "world-settings.default." + path ) );
     }
