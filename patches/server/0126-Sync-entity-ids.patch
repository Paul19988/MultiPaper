From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: PureGero <puregero@gmail.com>
Date: Sat, 9 Jul 2022 01:07:31 +1000
Subject: [PATCH] Sync entity ids


diff --git a/src/main/java/net/minecraft/server/level/ServerPlayer.java b/src/main/java/net/minecraft/server/level/ServerPlayer.java
index ad6446e2ac94bcfff7258d7b9866ed501d8bb8e3..b802d90448f3275776bed3a34bb3324f67b0ad3b 100644
--- a/src/main/java/net/minecraft/server/level/ServerPlayer.java
+++ b/src/main/java/net/minecraft/server/level/ServerPlayer.java
@@ -284,7 +284,7 @@ public class ServerPlayer extends Player {
     public boolean supressTrackerForLogin = false; // Paper - Fire PlayerJoinEvent when Player is actually ready
     // CraftBukkit end
     public boolean isRealPlayer; // Paper
-    public final com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> cachedSingleHashSet; // Paper
+    public com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<ServerPlayer> cachedSingleHashSet; // Paper // MultiPaper - make not final
     public com.destroystokyo.paper.event.entity.PlayerNaturallySpawnCreaturesEvent playerNaturallySpawnedEvent; // Paper - PlayerNaturallySpawnCreaturesEvent
     public @Nullable String clientBrandName = null; // Paper - Brand support
     public org.bukkit.event.player.PlayerQuitEvent.QuitReason quitReason = null; // Paper - Add API for quit reason; there are a lot of changes to do if we change all methods leading to the event
@@ -626,7 +626,9 @@ public class ServerPlayer extends Player {
             CompoundTag nbttagcompound2 = new CompoundTag();
             CompoundTag nbttagcompound3 = new CompoundTag();
 
+            entity.isSavingVehicle = true; // MultiPaper
             entity.save(nbttagcompound3);
+            entity.isSavingVehicle = false; // MultiPaper
             nbttagcompound2.putUUID("Attach", entity1.getUUID());
             nbttagcompound2.put("Entity", nbttagcompound3);
             nbt.put("RootVehicle", nbttagcompound2);
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 75f34238002ae284d62a8107ae2b662a57d010a4..0caba54803e881ad4dcb03a9c5fc713c0e9f8ea8 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -160,6 +160,8 @@ import puregero.multipaper.ExternalServer;
 import puregero.multipaper.ExternalServerConnection;
 import puregero.multipaper.MultiPaper;
 import puregero.multipaper.MultiPaperEntitiesHandler;
+import puregero.multipaper.MultiPaperEntityIdManager;
+import puregero.multipaper.config.MultiPaperConfiguration;
 import puregero.multipaper.externalserverprotocol.EntityRemovePacket;
 import puregero.multipaper.externalserverprotocol.EntityUpdateNBTPacket;
 import puregero.multipaper.externalserverprotocol.EntityUpdateWithDependenciesPacket;
@@ -364,7 +366,8 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
     public static final int FLAG_INVISIBLE = 5;
     protected static final int FLAG_GLOWING = 6;
     protected static final int FLAG_FALL_FLYING = 7;
-    public boolean isSyncing = false;  // MultiPaper - add isSyncing
+    public boolean isSyncing = false; // MultiPaper - add isSyncing
+    public boolean isSavingVehicle = false; // MultiPaper - add isSavingVehicle
     private static final EntityDataAccessor<Integer> DATA_AIR_SUPPLY_ID = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.INT);
     private static final EntityDataAccessor<Optional<Component>> DATA_CUSTOM_NAME = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.OPTIONAL_COMPONENT);
     private static final EntityDataAccessor<Boolean> DATA_CUSTOM_NAME_VISIBLE = SynchedEntityData.defineId(Entity.class, EntityDataSerializers.BOOLEAN);
@@ -601,6 +604,7 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
 
     public Entity(EntityType<?> type, Level world) {
         this.id = Entity.ENTITY_COUNTER.incrementAndGet();
+        this.id = MultiPaperEntityIdManager.next(); // MultiPaper - sync entity ids
         this.passengers = ImmutableList.of();
         this.deltaMovement = Vec3.ZERO;
         this.bb = Entity.INITIAL_AABB;
@@ -2469,6 +2473,13 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
     public CompoundTag saveWithoutId(CompoundTag nbttagcompound, boolean includeAll) {
         // CraftBukkit end
         try {
+            // MultiPaper start
+            if (this.isSyncing && MultiPaperConfiguration.get().syncSettings.syncEntityIds) nbttagcompound.putInt("EntityId", this.getId());
+            if (this.isSavingVehicle && MultiPaperConfiguration.get().syncSettings.persistentVehicleEntityIdsSeconds > 0) {
+                nbttagcompound.putInt("VehicleEntityId", this.getId());
+                nbttagcompound.putLong("VehicleEntityIdExpireTime", System.currentTimeMillis());
+            }
+            // MultiPaper end
             // CraftBukkit start - selectively save position
             if (includeAll) {
                 if (this.vehicle != null) {
@@ -2581,9 +2592,13 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
                     Entity entity = (Entity) iterator.next();
                     CompoundTag nbttagcompound1 = new CompoundTag();
 
+                    if (this.isSyncing) entity.isSyncing = true; // MultiPaper
+                    if (this.isSavingVehicle) entity.isSavingVehicle = true; // MultiPaper
                     if (entity.saveAsPassenger(nbttagcompound1, includeAll)) { // CraftBukkit - pass on includeAll
                         nbttaglist.add(nbttagcompound1);
                     }
+                    if (this.isSyncing) entity.isSyncing = false; // MultiPaper
+                    if (this.isSavingVehicle) entity.isSavingVehicle = false; // MultiPaper
                 }
 
                 if (!nbttaglist.isEmpty()) {
@@ -2635,6 +2650,28 @@ public abstract class Entity implements Nameable, EntityAccess, CommandSource, S
 
     public void load(CompoundTag nbt) {
         try {
+            // MultiPaper start
+            if (!(this instanceof ServerPlayer) && nbt.contains("EntityId") && MultiPaperConfiguration.get().syncSettings.syncEntityIds) {
+                int entityId = nbt.getInt("EntityId");
+                if (getId() != entityId) {
+                    if (level != null && level.getEntity(getId()) != null) {
+                        new Exception("Failed to sync entity id " + entityId + " for " + this + ". This entity id is already mapped to: " + level.getEntity(getId())).printStackTrace();
+                    } else {
+                        setId(entityId);
+                    }
+                }
+            }
+            if (!(this instanceof ServerPlayer) && nbt.contains("VehicleEntityId") && nbt.contains("VehicleEntityIdExpireTime") && nbt.getLong("VehicleEntityIdExpireTime") > System.currentTimeMillis() - MultiPaperConfiguration.get().syncSettings.persistentVehicleEntityIdsSeconds * 1000) {
+                int entityId = nbt.getInt("VehicleEntityId");
+                if (getId() != entityId) {
+                    if (level != null && level.getEntity(getId()) != null) {
+                        new Exception("Failed to persist vehicle entity id " + entityId + " for " + this + ". This entity id is already mapped to: " + level.getEntity(getId())).printStackTrace();
+                    } else {
+                        setId(entityId);
+                    }
+                }
+            }
+            // MultiPaper end
             ListTag nbttaglist = nbt.getList("Pos", 6);
             ListTag nbttaglist1 = nbt.getList("Motion", 6);
             ListTag nbttaglist2 = nbt.getList("Rotation", 5);
diff --git a/src/main/java/puregero/multipaper/ExternalPlayer.java b/src/main/java/puregero/multipaper/ExternalPlayer.java
index c18cf9b2c97c2fed1be5896b6ccc6c0f487d1513..3f5852a23e50b3fe5c53f860ee0ad07c7028bc6c 100644
--- a/src/main/java/puregero/multipaper/ExternalPlayer.java
+++ b/src/main/java/puregero/multipaper/ExternalPlayer.java
@@ -19,6 +19,7 @@ import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.CraftServer;
 import org.bukkit.craftbukkit.CraftWorld;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
+import puregero.multipaper.config.MultiPaperConfiguration;
 import puregero.multipaper.externalserverprotocol.EntityUpdatePacket;
 import puregero.multipaper.externalserverprotocol.HurtEntityPacket;
 
@@ -39,17 +40,24 @@ public class ExternalPlayer extends ServerPlayer {
     private boolean sendPackets = true;
     public boolean updatingData = false;
 
-    public static ExternalPlayer create(ExternalServerConnection externalServerConnection, GameProfile gameProfile, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address, CompoundTag saveData, String advancements, String stats) {
+    public static ExternalPlayer create(ExternalServerConnection externalServerConnection, GameProfile gameProfile, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address, CompoundTag saveData, String advancements, String stats, int entityId) {
         loadedAdvancements.put(gameProfile.getId(), advancements);
         loadedStats.put(gameProfile.getId(), stats);
-        return new ExternalPlayer(externalServerConnection, gameProfile, world, x, y, z, yaw, pitch, gamemode, address, saveData);
+        return new ExternalPlayer(externalServerConnection, gameProfile, world, x, y, z, yaw, pitch, gamemode, address, saveData, entityId);
     }
 
-    public ExternalPlayer(ExternalServerConnection externalServerConnection, GameProfile gameProfile, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address, CompoundTag saveData) {
+    public ExternalPlayer(ExternalServerConnection externalServerConnection, GameProfile gameProfile, String world, double x, double y, double z, float yaw, float pitch, GameType gamemode, InetSocketAddress address, CompoundTag saveData, int entityId) {
         super(((CraftServer) Bukkit.getServer()).getServer(), ((CraftWorld) Bukkit.getWorld(world)).getHandle(), gameProfile);
         MultiPaperInventoryHandler.updatingInventory = true;
         this.load(saveData);
         MultiPaperInventoryHandler.updatingInventory = false;
+
+        if (MultiPaperConfiguration.get().syncSettings.syncEntityIds) {
+            setId(entityId);
+            // Update cache hast sets with our new entity id
+            this.cachedSingleHashSet = new com.destroystokyo.paper.util.misc.PooledLinkedHashSets.PooledObjectLinkedOpenHashSet<>(this);
+        }
+
         this.externalServerConnection = externalServerConnection;
         this.address = address;
         this.isRealPlayer = true;
diff --git a/src/main/java/puregero/multipaper/MultiPaperEntityIdManager.java b/src/main/java/puregero/multipaper/MultiPaperEntityIdManager.java
new file mode 100644
index 0000000000000000000000000000000000000000..a3fe1beeba2c6d51a3533f9f74b5694b11bd57af
--- /dev/null
+++ b/src/main/java/puregero/multipaper/MultiPaperEntityIdManager.java
@@ -0,0 +1,83 @@
+package puregero.multipaper;
+
+import org.apache.logging.log4j.LogManager;
+import org.apache.logging.log4j.Logger;
+import puregero.multipaper.config.MultiPaperConfiguration;
+import puregero.multipaper.mastermessagingprotocol.messages.masterbound.RequestEntityIdBlock;
+import puregero.multipaper.mastermessagingprotocol.messages.serverbound.IntegerPairMessageReply;
+import java.util.Objects;
+import java.util.concurrent.CompletableFuture;
+import java.util.concurrent.atomic.AtomicInteger;
+
+/**
+ * Synchronise the entity ids between servers.
+ *
+ * Requirements: No two servers can assign the same entity id. A server must be
+ * able to assign a new entity id instantly without waiting for an I/O
+ * operation or anything.
+ *
+ * This solution: Allocate blocks of entity ids to servers. Eg, server1 gets
+ * block [0, 1024), server2 gets block [1024, 2048), etc. The server will be
+ * able to instantly assign an entity id from this block. An extra block will
+ * be cached on each server so that it can go into use immediately if the
+ * current block runs out of ids. If the cache is emptied, an async request
+ * will be made to assign a new block of entity ids to refill the cache in
+ * time for the next requirement for a new block.
+ */
+public class MultiPaperEntityIdManager {
+
+    private static final Logger LOGGER = LogManager.getLogger(MultiPaperEntityIdManager.class.getSimpleName());
+    private static AtomicInteger LOCAL_ENTITY_COUNTER = new AtomicInteger(1);
+    private static Block entityIdBlock = null;
+    private static Block nextEntityIdBlock = null;
+    private static long nextBlockRequestSentTime = 0;
+    private static CompletableFuture<Void> nextBlockRequest = CompletableFuture.completedFuture(null);
+
+    private static synchronized void getNextBlock(Block oldBlock) {
+        if (!Objects.equals(entityIdBlock, oldBlock)) {
+            // The block has already been changed by another thread, abort
+            return;
+        }
+        if (!nextBlockRequest.isDone()) {
+            // Wait for an ongoing request for the next block
+            LOGGER.warn("Waiting for more entity ids from the master. (The request for more entity ids was sent " + (System.currentTimeMillis() - nextBlockRequestSentTime) + "ms ago)");
+            nextBlockRequest.join();
+        }
+        if (nextEntityIdBlock == null) {
+            // There is no next block, request it. This is expected if the server has just started up.
+            requestNextBlock().join();
+        }
+        LOCAL_ENTITY_COUNTER = new AtomicInteger(nextEntityIdBlock.min);
+        entityIdBlock = nextEntityIdBlock;
+        nextEntityIdBlock = null;
+        // Begin the I/O request for the next block so that there's always one ready in the cache.
+        requestNextBlock();
+    }
+
+    private static CompletableFuture<Void> requestNextBlock() {
+        nextBlockRequestSentTime = System.currentTimeMillis();
+        return nextBlockRequest = MultiPaper.getConnection().sendAndAwaitReply(new RequestEntityIdBlock(), IntegerPairMessageReply.class).thenAccept(reply -> {
+            nextEntityIdBlock = new Block(reply.x, reply.y);
+        });
+    }
+
+    public static int next() {
+        if (MultiPaperConfiguration.get().syncSettings.syncEntityIds) {
+            Block block = entityIdBlock;
+            int id = LOCAL_ENTITY_COUNTER.getAndIncrement();
+            if (block == null || !block.isInBounds(id)) { // Check the max id before the min id due to concurrent variable modification
+                getNextBlock(block);
+                return next();
+            }
+            return id;
+        } else {
+            return LOCAL_ENTITY_COUNTER.getAndIncrement();
+        }
+    }
+
+    private record Block(int min, int max) {
+        public boolean isInBounds(int i) {
+            return i >= min && i < max;
+        }
+    }
+}
\ No newline at end of file
diff --git a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
index 8696dda2e8f4f45cd79f70f6b29fad8215cd3ca1..1958d98d3489fb4e7fa3f22585c317ba3232fd18 100644
--- a/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
+++ b/src/main/java/puregero/multipaper/externalserverprotocol/PlayerCreatePacket.java
@@ -45,6 +45,7 @@ public class PlayerCreatePacket extends ExternalServerPacket {
     private final String stats;
     private final ConcurrentHashMap<String, String> data;
     private final ConcurrentHashMap<String, String> persistentData;
+    private final int entityId;
 
     private PlayerCreatePacket(ServerPlayer player, CompoundTag saveData) {
         this.gameProfile = player.gameProfile;
@@ -62,6 +63,7 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         this.stats = player.getStats().toJson();
         this.data = player.getBukkitEntity().data;
         this.persistentData = player.getBukkitEntity().persistentData;
+        this.entityId = player.getId();
     }
 
     public PlayerCreatePacket(FriendlyByteBuf in) {
@@ -91,6 +93,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
         for (int i = 0; i < persistentDataLength; i++) {
             persistentData.put(in.readUtf(), in.readUtf());
         }
+
+        entityId = in.readVarInt();
     }
 
     @Override
@@ -123,6 +127,8 @@ public class PlayerCreatePacket extends ExternalServerPacket {
             out.writeUtf(entry.getKey());
             out.writeUtf(entry.getValue());
         }
+
+        out.writeVarInt(entityId);
     }
 
     @Override
@@ -142,7 +148,7 @@ public class PlayerCreatePacket extends ExternalServerPacket {
                 e.printStackTrace();
             }
 
-            ExternalPlayer player = ExternalPlayer.create(connection, gameProfile, world, x, y, z, yaw, pitch, gamemode, address, saveData, advancements, stats);
+            ExternalPlayer player = ExternalPlayer.create(connection, gameProfile, world, x, y, z, yaw, pitch, gamemode, address, saveData, advancements, stats, entityId);
             player.getBukkitEntity().data = data;
             player.getBukkitEntity().persistentData = persistentData;
         });
